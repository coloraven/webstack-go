// Code generated by MockGen. DO NOT EDIT.
// Source: internal/dal/repository/sys_config.go
//
// Generated by this command:
//
//	mockgen -source=internal/dal/repository/sys_config.go -destination internal/dal/repository/sys_config.mockgen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/ch3nnn/webstack-go/internal/dal/model"
	gomock "go.uber.org/mock/gomock"
	gen "gorm.io/gen"
	field "gorm.io/gen/field"
)

// MockISysConfigDao is a mock of ISysConfigDao interface.
type MockISysConfigDao struct {
	ctrl     *gomock.Controller
	recorder *MockISysConfigDaoMockRecorder
	isgomock struct{}
}

// MockISysConfigDaoMockRecorder is the mock recorder for MockISysConfigDao.
type MockISysConfigDaoMockRecorder struct {
	mock *MockISysConfigDao
}

// NewMockISysConfigDao creates a new mock instance.
func NewMockISysConfigDao(ctrl *gomock.Controller) *MockISysConfigDao {
	mock := &MockISysConfigDao{ctrl: ctrl}
	mock.recorder = &MockISysConfigDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISysConfigDao) EXPECT() *MockISysConfigDaoMockRecorder {
	return m.recorder
}

// WhereByAboutAuthor mocks base method.
func (m *MockISysConfigDao) WhereByAboutAuthor(aboutAuthor string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereByAboutAuthor", aboutAuthor)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereByAboutAuthor indicates an expected call of WhereByAboutAuthor.
func (mr *MockISysConfigDaoMockRecorder) WhereByAboutAuthor(aboutAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereByAboutAuthor", reflect.TypeOf((*MockISysConfigDao)(nil).WhereByAboutAuthor), aboutAuthor)
}

// WhereByAboutSite mocks base method.
func (m *MockISysConfigDao) WhereByAboutSite(aboutSite string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereByAboutSite", aboutSite)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereByAboutSite indicates an expected call of WhereByAboutSite.
func (mr *MockISysConfigDaoMockRecorder) WhereByAboutSite(aboutSite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereByAboutSite", reflect.TypeOf((*MockISysConfigDao)(nil).WhereByAboutSite), aboutSite)
}

// WhereByID mocks base method.
func (m *MockISysConfigDao) WhereByID(id int) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereByID", id)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereByID indicates an expected call of WhereByID.
func (mr *MockISysConfigDaoMockRecorder) WhereByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereByID", reflect.TypeOf((*MockISysConfigDao)(nil).WhereByID), id)
}

// WhereByIsAbout mocks base method.
func (m *MockISysConfigDao) WhereByIsAbout(isAbout bool) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereByIsAbout", isAbout)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereByIsAbout indicates an expected call of WhereByIsAbout.
func (mr *MockISysConfigDaoMockRecorder) WhereByIsAbout(isAbout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereByIsAbout", reflect.TypeOf((*MockISysConfigDao)(nil).WhereByIsAbout), isAbout)
}

// WhereBySiteDesc mocks base method.
func (m *MockISysConfigDao) WhereBySiteDesc(siteDesc string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteDesc", siteDesc)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteDesc indicates an expected call of WhereBySiteDesc.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteDesc(siteDesc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteDesc", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteDesc), siteDesc)
}

// WhereBySiteFavicon mocks base method.
func (m *MockISysConfigDao) WhereBySiteFavicon(siteFavicon string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteFavicon", siteFavicon)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteFavicon indicates an expected call of WhereBySiteFavicon.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteFavicon(siteFavicon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteFavicon", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteFavicon), siteFavicon)
}

// WhereBySiteKeyword mocks base method.
func (m *MockISysConfigDao) WhereBySiteKeyword(siteKeyword string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteKeyword", siteKeyword)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteKeyword indicates an expected call of WhereBySiteKeyword.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteKeyword(siteKeyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteKeyword", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteKeyword), siteKeyword)
}

// WhereBySiteLogo mocks base method.
func (m *MockISysConfigDao) WhereBySiteLogo(siteLogo string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteLogo", siteLogo)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteLogo indicates an expected call of WhereBySiteLogo.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteLogo(siteLogo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteLogo", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteLogo), siteLogo)
}

// WhereBySiteRecord mocks base method.
func (m *MockISysConfigDao) WhereBySiteRecord(siteRecord string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteRecord", siteRecord)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteRecord indicates an expected call of WhereBySiteRecord.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteRecord(siteRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteRecord", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteRecord), siteRecord)
}

// WhereBySiteTitle mocks base method.
func (m *MockISysConfigDao) WhereBySiteTitle(siteTitle string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteTitle", siteTitle)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteTitle indicates an expected call of WhereBySiteTitle.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteTitle(siteTitle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteTitle", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteTitle), siteTitle)
}

// WhereBySiteURL mocks base method.
func (m *MockISysConfigDao) WhereBySiteURL(siteURL string) func(gen.Dao) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereBySiteURL", siteURL)
	ret0, _ := ret[0].(func(gen.Dao) gen.Dao)
	return ret0
}

// WhereBySiteURL indicates an expected call of WhereBySiteURL.
func (mr *MockISysConfigDaoMockRecorder) WhereBySiteURL(siteURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereBySiteURL", reflect.TypeOf((*MockISysConfigDao)(nil).WhereBySiteURL), siteURL)
}

// WithContext mocks base method.
func (m *MockISysConfigDao) WithContext(ctx context.Context) iCustomGenSysConfigFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(iCustomGenSysConfigFunc)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockISysConfigDaoMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockISysConfigDao)(nil).WithContext), ctx)
}

// MockiCustomGenSysConfigFunc is a mock of iCustomGenSysConfigFunc interface.
type MockiCustomGenSysConfigFunc struct {
	ctrl     *gomock.Controller
	recorder *MockiCustomGenSysConfigFuncMockRecorder
	isgomock struct{}
}

// MockiCustomGenSysConfigFuncMockRecorder is the mock recorder for MockiCustomGenSysConfigFunc.
type MockiCustomGenSysConfigFuncMockRecorder struct {
	mock *MockiCustomGenSysConfigFunc
}

// NewMockiCustomGenSysConfigFunc creates a new mock instance.
func NewMockiCustomGenSysConfigFunc(ctrl *gomock.Controller) *MockiCustomGenSysConfigFunc {
	mock := &MockiCustomGenSysConfigFunc{ctrl: ctrl}
	mock.recorder = &MockiCustomGenSysConfigFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiCustomGenSysConfigFunc) EXPECT() *MockiCustomGenSysConfigFuncMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockiCustomGenSysConfigFunc) Create(m *model.SysConfig) (*model.SysConfig, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", m)
	ret0, _ := ret[0].(*model.SysConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) Create(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).Create), m)
}

// Delete mocks base method.
func (m *MockiCustomGenSysConfigFunc) Delete(whereFunc ...func(gen.Dao) gen.Dao) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) Delete(whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).Delete), whereFunc...)
}

// DeletePhysical mocks base method.
func (m *MockiCustomGenSysConfigFunc) DeletePhysical(whereFunc ...func(gen.Dao) gen.Dao) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePhysical", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhysical indicates an expected call of DeletePhysical.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) DeletePhysical(whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhysical", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).DeletePhysical), whereFunc...)
}

// FindAll mocks base method.
func (m *MockiCustomGenSysConfigFunc) FindAll(whereFunc ...func(gen.Dao) gen.Dao) ([]*model.SysConfig, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].([]*model.SysConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) FindAll(whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).FindAll), whereFunc...)
}

// FindCount mocks base method.
func (m *MockiCustomGenSysConfigFunc) FindCount(whereFunc ...func(gen.Dao) gen.Dao) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCount indicates an expected call of FindCount.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) FindCount(whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCount", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).FindCount), whereFunc...)
}

// FindOne mocks base method.
func (m *MockiCustomGenSysConfigFunc) FindOne(whereFunc ...func(gen.Dao) gen.Dao) (*model.SysConfig, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*model.SysConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) FindOne(whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).FindOne), whereFunc...)
}

// FindPage mocks base method.
func (m *MockiCustomGenSysConfigFunc) FindPage(page, pageSize int, orderColumns []field.Expr, whereFunc ...func(gen.Dao) gen.Dao) ([]*model.SysConfig, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{page, pageSize, orderColumns}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPage", varargs...)
	ret0, _ := ret[0].([]*model.SysConfig)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPage indicates an expected call of FindPage.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) FindPage(page, pageSize, orderColumns any, whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{page, pageSize, orderColumns}, whereFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).FindPage), varargs...)
}

// Scan mocks base method.
func (m *MockiCustomGenSysConfigFunc) Scan(result any, whereFunc ...func(gen.Dao) gen.Dao) error {
	m.ctrl.T.Helper()
	varargs := []any{result}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) Scan(result any, whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result}, whereFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).Scan), varargs...)
}

// ScanPage mocks base method.
func (m *MockiCustomGenSysConfigFunc) ScanPage(page, pageSize int, orderColumns []field.Expr, result any, whereFunc ...func(gen.Dao) gen.Dao) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{page, pageSize, orderColumns, result}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanPage", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanPage indicates an expected call of ScanPage.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) ScanPage(page, pageSize, orderColumns, result any, whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{page, pageSize, orderColumns, result}, whereFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPage", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).ScanPage), varargs...)
}

// Update mocks base method.
func (m *MockiCustomGenSysConfigFunc) Update(v any, whereFunc ...func(gen.Dao) gen.Dao) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{v}
	for _, a := range whereFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockiCustomGenSysConfigFuncMockRecorder) Update(v any, whereFunc ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{v}, whereFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockiCustomGenSysConfigFunc)(nil).Update), varargs...)
}